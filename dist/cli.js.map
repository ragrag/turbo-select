{"mappings":"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","sources":["source/cli.tsx","source/ui.tsx","source/lib.ts"],"sourcesContent":["#!/usr/bin/env node\nimport React from \"react\";\nimport { render } from \"ink\";\nimport meow from \"meow\";\nimport App from \"./ui\";\n\nconst cli = meow(\n\t`\n\tUsage\n\t  $ turbo-select\n\n\tOptions\n\t\t--no-deps exclude dependencies\n\n\tExamples\n\t  $ turbo-select \n`,\n\t{\n\t\tflags: {\n\t\t\tdeps: {\n\t\t\t\ttype: \"boolean\",\n\t\t\t\tdefault: true,\n\t\t\t},\n\t\t},\n\t}\n);\n\nrender(<App options={{ ...cli.flags }} />);\n","import React, { FC, useEffect, useState, useMemo } from \"react\";\nimport Spinner from \"ink-spinner\";\nimport { Text } from \"ink\";\nimport MultiSelect, { ListedItem } from \"ink-multi-select\";\nimport SelectInput from \"ink-select-input\";\n\nimport {\n\tTurboSelectOptions,\n\tdispatchTurboCommand,\n\tparseTurbo,\n\tTurboPackage,\n\tTurboScript,\n} from \"./lib\";\n\nconst App: FC<{ options?: TurboSelectOptions }> = ({ options }) => {\n\tconst [loading, setLoading] = useState(true);\n\tconst [cliStep, setCliStep] = useState(1);\n\n\tconst [turboScripts, setTurboScripts] = useState<TurboScript[]>([]);\n\tconst [workspacePackages, setWorkspacePackages] = useState<TurboPackage[]>(\n\t\t[]\n\t);\n\n\tconst [selectedScript, setSelectedScript] = useState<TurboScript | null>(\n\t\tnull\n\t);\n\tconst [selectedPackages, setSelectedPackages] = useState<string[]>([]);\n\n\t// init\n\tuseEffect(() => {\n\t\tconst initializeTurboSelect = async () => {\n\t\t\tconst { scripts, workspacePackages } = await parseTurbo();\n\n\t\t\tsetTurboScripts(scripts);\n\t\t\tsetWorkspacePackages(workspacePackages);\n\n\t\t\tsetLoading(false);\n\t\t};\n\n\t\tinitializeTurboSelect();\n\t}, []);\n\n\t// dispatch cli command\n\tuseEffect(() => {\n\t\tconst dispatchCommand = async () => {\n\t\t\tif (selectedScript && selectedPackages.length) {\n\t\t\t\tsetCliStep(3);\n\t\t\t\tdispatchTurboCommand(selectedScript, selectedPackages, options);\n\t\t\t}\n\t\t};\n\t\tdispatchCommand();\n\t}, [selectedPackages]);\n\n\tconst scriptOptions = useMemo(() => {\n\t\treturn turboScripts.map((p) => ({\n\t\t\tlabel: p.name,\n\t\t\tvalue: p,\n\t\t\tkey: p.name,\n\t\t}));\n\t}, [turboScripts]);\n\n\tconst packageOptions = useMemo(() => {\n\t\treturn workspacePackages.map((p) => ({\n\t\t\tlabel: `[${p.workspace}] - ${p.name}`,\n\t\t\tvalue: p.name,\n\t\t\tkey: `${p.workspace}.${p.name}`,\n\t\t}));\n\t}, [workspacePackages]);\n\n\tconst onScriptSelected = (selected: {\n\t\tlabel: string;\n\t\tvalue: TurboScript;\n\t}) => {\n\t\tsetSelectedScript(selected.value);\n\t\tsetCliStep(2);\n\t};\n\n\tconst onPackagesSelected = (selected: ListedItem[]) => {\n\t\tsetSelectedPackages(selected.map((p) => p.value as string));\n\t};\n\n\treturn loading ? (\n\t\t<Text>\n\t\t\t<Text color=\"blue\">\n\t\t\t\t<Spinner type=\"dots\" />\n\t\t\t</Text>\n\t\t\t{\" Loading\"}\n\t\t</Text>\n\t) : (\n\t\t<>\n\t\t\t{cliStep === 1 ? (\n\t\t\t\t<>\n\t\t\t\t\t<Text>Select Script:</Text>\n\t\t\t\t\t<SelectInput items={scriptOptions} onSelect={onScriptSelected} />\n\t\t\t\t</>\n\t\t\t) : cliStep === 2 ? (\n\t\t\t\t<>\n\t\t\t\t\t<Text>Select Packages:</Text>\n\t\t\t\t\t<MultiSelect items={packageOptions} onSubmit={onPackagesSelected} />\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<Text>Running Turbo</Text>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nmodule.exports = App;\nexport default App;\n","import fs from \"fs/promises\";\r\nimport path from \"path\";\r\nimport glob from \"glob\";\r\nimport { execSync } from \"child_process\";\r\n\r\nexport type TurboSelectOptions = {\r\n\tdeps?: boolean;\r\n};\r\n\r\nexport type TurboScript = {\r\n\tname: string;\r\n\tcommand: string;\r\n};\r\n\r\nexport type TurboPackage = {\r\n\tname: string;\r\n\tworkspace: string;\r\n};\r\n\r\ntype IPackageJson = Record<string, any> & {\r\n\tname?: string;\r\n\tscripts?: Record<string, string>;\r\n\tworkspaces?: string[];\r\n};\r\n\r\nconst assertError: (value: unknown, message?: string) => asserts value = (\r\n\tvalue: unknown,\r\n\tmessage?: string\r\n) => {\r\n\tif (!value) {\r\n\t\tthrow new Error(message);\r\n\t}\r\n};\r\n\r\nconst parsePkgJson = async (path: string): Promise<IPackageJson> => {\r\n\tconst packageJsonBuffer = await fs.readFile(path);\r\n\treturn JSON.parse(packageJsonBuffer as any);\r\n};\r\n\r\nconst parseScripts = (pkgJson: IPackageJson): TurboScript[] => {\r\n\tassertError(pkgJson.scripts, \"Couldn't find package.json scripts\");\r\n\r\n\treturn Object.entries(pkgJson.scripts)\r\n\t\t.filter(([, command]) => command.includes(\"turbo\"))\r\n\t\t.map(([name, command]) => ({ name, command }));\r\n};\r\n\r\nconst parseWorkspacePackages = async (\r\n\tpkgJson: IPackageJson\r\n): Promise<TurboPackage[]> => {\r\n\tassertError(pkgJson.workspaces, \"No package workspaces found\");\r\n\r\n\tconst workspaceWithPkgDirs = pkgJson.workspaces.reduce<\r\n\t\t{\r\n\t\t\tworkspace: string;\r\n\t\t\tdir: string;\r\n\t\t}[]\r\n\t>((acc, workspace) => {\r\n\t\tconst trimmedWorkSpace = workspace\r\n\t\t\t.replaceAll(\"/\", \"\")\r\n\t\t\t.replaceAll(\"*\", \"\")\r\n\t\t\t.trim();\r\n\r\n\t\treturn [\r\n\t\t\t...acc,\r\n\t\t\t...glob\r\n\t\t\t\t// @todo: use ignore opt to ignore node_modules\r\n\t\t\t\t.sync(path.join(process.cwd(), `${trimmedWorkSpace}/**/package.json`))\r\n\t\t\t\t.filter((dir) => !dir.includes(\"node_modules\"))\r\n\t\t\t\t.map((dir) => ({ workspace: trimmedWorkSpace, dir })),\r\n\t\t];\r\n\t}, []);\r\n\r\n\tconst workspacePackages: TurboPackage[] = [];\r\n\tfor (const { workspace, dir } of workspaceWithPkgDirs) {\r\n\t\tconst pkgJson = await parsePkgJson(dir);\r\n\t\tif (pkgJson.name) {\r\n\t\t\tworkspacePackages.push({ workspace, name: pkgJson.name });\r\n\t\t}\r\n\t}\r\n\r\n\treturn workspacePackages;\r\n};\r\n\r\nexport const parseTurbo = async (): Promise<{\r\n\tscripts: TurboScript[];\r\n\tworkspacePackages: TurboPackage[];\r\n}> => {\r\n\tconst pkgJson: IPackageJson = await parsePkgJson(\r\n\t\tpath.join(process.cwd(), \"package.json\")\r\n\t);\r\n\r\n\tconst scripts = parseScripts(pkgJson);\r\n\tconst workspacePackages = await parseWorkspacePackages(pkgJson);\r\n\r\n\tassertError(scripts.length, \"No turbo scripts found\");\r\n\tassertError(workspacePackages.length, \"No packages found in workspaces\");\r\n\r\n\treturn {\r\n\t\tscripts,\r\n\t\tworkspacePackages,\r\n\t};\r\n};\r\n\r\nexport const dispatchTurboCommand = (\r\n\tscript: TurboScript,\r\n\tscopedPkgs: string[],\r\n\toptions?: TurboSelectOptions\r\n): void => {\r\n\tconst scopesWithDeps = scopedPkgs.map((pkg) => `--scope=\"${pkg}\"`).join(\" \");\r\n\r\n\tconst flags = `${options?.deps ? \"--include-dependencies\" : \"\"}`;\r\n\r\n\tconst turboCommand = `${script.command} ${scopesWithDeps} ${flags}`;\r\n\r\n\texecSync(turboCommand, { stdio: \"inherit\" });\r\n};\r\n"],"names":[],"version":3,"file":"cli.js.map","sourceRoot":"../"}